// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	fluttersdk "github.com/bitrise-io/go-flutter/fluttersdk"
	mock "github.com/stretchr/testify/mock"
)

// SDKVersionLister is an autogenerated mock type for the SDKVersionLister type
type SDKVersionLister struct {
	mock.Mock
}

// ListReleasesOnChannel provides a mock function with given fields: platform, architecture, channel
func (_m *SDKVersionLister) ListReleasesOnChannel(platform fluttersdk.Platform, architecture fluttersdk.Architecture, channel fluttersdk.Channel) ([]fluttersdk.Release, error) {
	ret := _m.Called(platform, architecture, channel)

	var r0 []fluttersdk.Release
	var r1 error
	if rf, ok := ret.Get(0).(func(fluttersdk.Platform, fluttersdk.Architecture, fluttersdk.Channel) ([]fluttersdk.Release, error)); ok {
		return rf(platform, architecture, channel)
	}
	if rf, ok := ret.Get(0).(func(fluttersdk.Platform, fluttersdk.Architecture, fluttersdk.Channel) []fluttersdk.Release); ok {
		r0 = rf(platform, architecture, channel)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]fluttersdk.Release)
		}
	}

	if rf, ok := ret.Get(1).(func(fluttersdk.Platform, fluttersdk.Architecture, fluttersdk.Channel) error); ok {
		r1 = rf(platform, architecture, channel)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewSDKVersionLister interface {
	mock.TestingT
	Cleanup(func())
}

// NewSDKVersionLister creates a new instance of SDKVersionLister. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewSDKVersionLister(t mockConstructorTestingTNewSDKVersionLister) *SDKVersionLister {
	mock := &SDKVersionLister{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
